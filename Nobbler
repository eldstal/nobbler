#!/bin/env python3

import asyncio

import task.knob
import task.trigger
import task.action
#import config
import command


def default_config():
  return {
    "nobbler": {
        "verbose": True
    },

    "knobs": {
      "interfaces": [
        { "kind": "serial" }
      ]
    },

    "actions": [
      { "name": "debug", "scaling": [0,100],
        "steps": [
            { "kind": "log", "message": "You've got mail: {value}" }
        ]
      },

      { "name": "system_volume", "scaling": [0,65535], "round": True,
        "steps": [
            { "kind": "command", "command": "nircmd setsysvolume {value}" }
        ]
      },

      { "name": "switch_bright",
        "steps": [
            { "kind": "view", "view": "brightness" } 
        ]
      },

      { "name": "switch_vol",
        "steps": [
            { "kind": "view", "view": "volume" } 
        ]
      }
    ],

    "views": [
        {
          "name": "volume",
          "knob_action": "system_volume",
          "press_action": "switch_bright",

          "config": {
            "position": 50,
            "min_position": 0,
            "max_position": 100,
            "position_width_radians": 0.047,
            "detent_strength_unit": 1,
            "snap_point": 1.1,
            "text": "Volume",
            "detent_positions": [],
            "snap_point_bias": 0,
            "led_hue": 8
          }
        },

        {
          "name": "brightness",
          "knob_action": "debug",
          "press_action": "switch_vol",
          "config": {
            "position": 50,
            "min_position": 0,
            "max_position": 100,
            "position_width_radians": 0.047,
            "detent_strength_unit": 1,
            "snap_point": 1.1,
            "text": "Brightness",
            "detent_positions": [],
            "snap_point_bias": 0,
            "led_hue": 180
          }

        }

    ],

    "triggers": []

  }


async def main():

  # TODO: Load and sanity check format of configuration
  conf = default_config()

  await command.init()

  knob_task = asyncio.create_task(task.knob.main(conf))
  trigger_task = asyncio.create_task(task.trigger.main(conf))
  action_task = asyncio.create_task(task.action.main(conf))

  await asyncio.sleep(5)

  #await command.set_config("volume")

  await asyncio.sleep(5)

  trigger_task.cancel()
  knob_task.cancel()
  action_task.cancel()

  await trigger_task
  await knob_task
  await action_task


if __name__ == "__main__":
  asyncio.run(main())
